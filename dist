#!/bin/sh
case "$1" in
    [0-9].[0-9][a-z]-[0-9].[0-9][0-9][0-9])	ver=$1	;;
    [0-9].[0-9][a-z])	ver=$1	;;
    [0-9].[0-9])	ver=$1	;;
    *)	echo "Usage dist <version> [<time stamp>]"
	exit 1
	;;
esac
shift
stoneme=stone23me
stonent=stone23nt
stonexp=stone23xp
stonez=stone23z
if [ -n "$1" ]
then	stamp=$1
fi
rm -rf stone-$ver stoneme-$ver.lzh stonent-$ver.lzh stonexp-$ver.lzh \
	stone_${ver}_arm stone_${ver}_arm.ipk

nkf_s() {
	nkf -sc $1 > $2/$1
	tscopy $1 $2/$1
}

nkf_s	README.txt	$stoneme
nkf_s	README.en.txt	$stoneme
nkf_s	stone.c		$stoneme
nkf_s	Makefile	$stoneme
nkf_s	GPL.txt		$stoneme
nkf_s	logmsg.mc	$stoneme
nkf_s	service.c	$stoneme
nkf_s	service.h	$stoneme
nkf_s	svcbody.c	$stoneme
nkf_s	svcbody.h	$stoneme
nkf_s	cryptoapi.c	$stoneme
nkf_s	README.txt	$stonent
nkf_s	README.en.txt	$stonent
nkf_s	stone.c		$stonent
nkf_s	Makefile	$stonent
nkf_s	GPL.txt		$stonent
nkf_s	logmsg.mc	$stonent
nkf_s	service.c	$stonent
nkf_s	service.h	$stonent
nkf_s	svcbody.c	$stonent
nkf_s	svcbody.h	$stonent
nkf_s	cryptoapi.c	$stonent
nkf_s	README.txt	$stonexp
nkf_s	README.en.txt	$stonexp
nkf_s	stone.c		$stonexp
nkf_s	Makefile	$stonexp
nkf_s	GPL.txt		$stonexp
nkf_s	logmsg.mc	$stonexp
nkf_s	service.c	$stonexp
nkf_s	service.h	$stonexp
nkf_s	svcbody.c	$stonexp
nkf_s	svcbody.h	$stonexp
nkf_s	cryptoapi.c	$stonexp
mkdir stone-$ver
cp -p README.en.txt stone.1 README.txt stone.1.ja stone.c Makefile GPL.txt logmsg.mc service.c service.h svcbody.c svcbody.h cryptoapi.c stone-$ver/.
sed -e "s/^Version: .*/Version: $ver/" stone.spec > stone-$ver/stone.spec

mkdir -p stone_${ver}_arm/CONTROL
cat > stone_${ver}_arm/CONTROL/control <<EOF
Package: stone
Version: $ver
Architecture: arm
Section: net
Priority: optional
Depends: openssl (>=0.9.7)
Maintainer: Hiroaki Sengoku <sengoku@gcd.org>
Description: TCP/UDP repeater
	Stone is a TCP/IP repeater in the application layer.
	It repeats TCP and UDP from inside to outside of a firewall,
	or from outside to inside.  Refer http://www.gcd.org/sengoku/stone/
EOF
mkdir -p stone_${ver}_arm/usr/local/bin
cp -p $stonez/stone stone_${ver}_arm/usr/local/bin/stone

if [ -n "$stamp" ]
then	touch -t $stamp  \
	$stoneme/README.*    $stonent/README.*    $stonexp/README.*    \
	$stoneme/stone.c     $stonent/stone.c     $stonexp/stone.c     \
	$stoneme/stone.exe   $stonent/stone.exe   $stonexp/stone.exe   \
	$stoneme/Makefile    $stonent/Makefile    $stonexp/Makefile    \
	$stoneme/logmsg.mc   $stonent/logmsg.mc   $stonexp/logmsg.mc   \
	$stoneme/service.c   $stonent/service.c   $stonexp/service.c   \
	$stoneme/service.h   $stonent/service.h   $stonexp/service.h   \
	$stoneme/svcbody.c   $stonent/svcbody.c   $stonexp/svcbody.c   \
	$stoneme/svcbody.h   $stonent/svcbody.h   $stonexp/svcbody.h   \
	$stoneme/cryptoapi.c $stonent/cryptoapi.c $stonexp/cryptoapi.c \
	stone-$ver/README.* stone-$ver/stone.c stone-$ver/Makefile \
	stone-$ver/stone.spec \
	stone-$ver/logmsg.mc \
	stone-$ver/service.c stone-$ver/service.h \
	stone-$ver/svcbody.c stone-$ver/svcbody.h \
	stone-$ver/cryptoapi.c \
	README.* stone.c Makefile \
	stone_${ver}_arm/CONTROL/control \
	stone_${ver}_arm/usr/local/bin/stone
	find $stone $stonent $stonexp stone-$ver stone_${ver}_arm -type d \
		| xargs touch -t $stamp
	tar czf stone-$ver.tar.gz stone-$ver
	lha u stoneme-$ver.lzh $stoneme
	lha u stonent-$ver.lzh $stonent
	lha u stonexp-$ver.lzh $stonexp
	ipkg-build stone_${ver}_arm
	touch -t $stamp stone-$ver.tar.gz \
		stoneme-$ver.lzh stonent-$ver.lzh stonexp-$ver.lzh \
		stone_${ver}_arm.ipk
fi
